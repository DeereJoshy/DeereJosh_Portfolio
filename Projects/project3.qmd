---
title: "Client Report - Finding Relationships in Baseball"
subtitle: "Course DS 250"
author: "Josh Deere"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false 
---


```{python}
import pandas as pd
import numpy as np
import sqlite3
import plotly_express as px
```

```{python}
sqlite_file = 'lahmansbaseballdb.sqlite'
con = sqlite3.connect(sqlite_file)
```

## Elevator pitch

_Baseball is a very complex sport with a variety of measure to use for analysis. BYU-I has contributed to the baseball scene with players around the U.S. Batting average decreases the more you play, which is only natural considering that batters are human. The Yankees dominate the Red Sox with Wins over Losses over almost every season._

## DELIVERABLE 1

__Write an SQL query to create a new dataframe about baseball players who attended BYU-Idaho. The new table should contain five columns: playerID, schoolID, salary, and the yearID/teamID associated with each salary. Order the table by salary (highest to lowest) and print out the table in your report.__

_A lot of players are with SLN and FLO and making a decent salary. There is a player who is not listed in the salary table which would be missed without the proper join._

```{python}
q = '''
SELECT DISTINCT c.playerID, s.schoolID, sa.salary, sa.yearID, sa.teamID
FROM CollegePlaying AS c
JOIN Schools AS s
ON c.schoolID = s.schoolID
LEFT JOIN salaries AS sa
ON c.playerID = sa.playerID
WHERE s.name_full LIKE "Brigham Young University-Idaho"
ORDER BY sa.salary DESC
'''

pd.read_sql_query(q, con)
```

## DELIVERABLE 2

__This three-part question requires you to calculate batting average (number of hits divided by the number of at-bats)__ 

_1. Write an SQL query that provides playerID, yearID, and batting average for players with at least 1 at bat that year. Sort the table from highest batting average to lowest, and then by playerid alphabetically._ 

_There are a lot of players who only were at bat once and had a hit, giving them a 100% average. Of course, the more at bats, the lower the average because they aren't robots and can hit everything._

```{python}
q = '''
SELECT playerID, yearID, H, AB, CAST(H AS FLOAT) / CAST(AB AS FLOAT) * 100 AS 'battingAverage%'
FROM Batting
GROUP BY playerID
HAVING AB >= 1
ORDER BY CAST(H AS FLOAT) / CAST(AB AS FLOAT) DESC, playerID 
LIMIT 5
'''

pd.read_sql_query(q, con)
```

__2. Show the top 5 results in your report. Use the same query as above, but only include players with at least 10 at bats that year. Print the top 5 results.__

```{python}
q2 = '''
SELECT playerID, yearID, AB, CAST(H AS FLOAT) / CAST(AB AS FLOAT) * 100 AS 'battingAverage%'
FROM Batting
GROUP BY playerID
HAVING AB >= 10
ORDER BY CAST(H AS FLOAT) / CAST(AB AS FLOAT) * 100 DESC, playerID
LIMIT 5
'''
pd.read_sql_query(q2, con)
```

__3.Now calculate the batting average for players over their entire careers (all years combined). Only include players with at least 100 at bats, and print the top 5 results.__

```{python}
q3 = '''
SELECT playerID, SUM(AB) AS 'At Bats', SUM(CAST(H AS FLOAT)) / SUM(CAST(AB AS FLOAT)) * 100 AS 'battingAverage%'
FROM Batting
GROUP BY playerID
HAVING SUM(AB) >= 100
ORDER BY SUM(CAST(H AS FLOAT)) / SUM(CAST(AB AS FLOAT)) * 100 * 100 DESC, playerID
LIMIT 5
'''
pd.read_sql_query(q3, con)
```

## DELIVERABLE 3

__Pick any two baseball teams and compare them using a metric of your choice (average salary, home runs, number of wins, etc). Write an SQL query to get the data you need, then make a graph using Plotly Express to visualize the comparison. What do you learn?__

_The Red Sox suffered in the 20s, while the Yankees dominated the conference. But some of the Sox's best seasons have been within the last 50 years, while the Yankees have struggled as of late._

```{python}
qy = '''
SELECT name, yearID, teamID, W, L, CAST(W AS FLOAT) / CAST(L AS FLOAT) AS 'W/L Ratio'
FROM Teams
WHERE name IN ('New York Yankees','Boston Red Sox')
ORDER BY W DESC
'''
# Sox in where clause with AND to put on same table
results = pd.read_sql_query(qy, con)
results

```

```{python}
fig = pd.read_sql_query(qy, con)

fig = px.bar (results,title= 'The Yankees and The Sox' , x = 'yearID', y = 'W/L Ratio', color= 'name')
fig.show()
```